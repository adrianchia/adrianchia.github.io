{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","location","allMdx","edges","totalCount","tagHeader","map","node","slug","fields","title","frontmatter","key","to","pageQuery"],"mappings":"4FAAA,uFAsDeA,UAjDF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KACnBC,GADwC,EAAfC,SACjBH,EAARE,KADwC,EAElBD,EAAKG,OAA3BC,EAFwC,EAExCA,MAAOC,EAFiC,EAEjCA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,gBAECJ,EAEhB,OACE,uBACE,sBAAKK,GACL,sBACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACE,kBAAIE,IAAKJ,GACP,YAAC,OAAD,CAAMK,GAAIL,GAAOE,QAKzB,YAAC,OAAD,CAAMG,GAAG,SAAT,cA8BC,IAAMC,EAAS","file":"component---src-templates-tags-js-0dcb3ee7d1e848cd3358.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMdx\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with ${tag}`\n\n  return (\n    <div>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      <Link to=\"/tags\">All tags</Link>\n    </div>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}